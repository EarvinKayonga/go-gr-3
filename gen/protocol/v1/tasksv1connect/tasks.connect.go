// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protocol/v1/tasks.proto

package tasksv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/EarvinKayonga/tasks/gen/protocol/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TaskServiceName is the fully-qualified name of the TaskService service.
	TaskServiceName = "tasks.v1.TaskService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TaskServiceGetTasksProcedure is the fully-qualified name of the TaskService's GetTasks RPC.
	TaskServiceGetTasksProcedure = "/tasks.v1.TaskService/GetTasks"
	// TaskServiceGetTaskProcedure is the fully-qualified name of the TaskService's GetTask RPC.
	TaskServiceGetTaskProcedure = "/tasks.v1.TaskService/GetTask"
	// TaskServiceCreateTaskProcedure is the fully-qualified name of the TaskService's CreateTask RPC.
	TaskServiceCreateTaskProcedure = "/tasks.v1.TaskService/CreateTask"
	// TaskServiceUpdateTaskProcedure is the fully-qualified name of the TaskService's UpdateTask RPC.
	TaskServiceUpdateTaskProcedure = "/tasks.v1.TaskService/UpdateTask"
	// TaskServiceDeleteTaskProcedure is the fully-qualified name of the TaskService's DeleteTask RPC.
	TaskServiceDeleteTaskProcedure = "/tasks.v1.TaskService/DeleteTask"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	taskServiceServiceDescriptor          = v1.File_protocol_v1_tasks_proto.Services().ByName("TaskService")
	taskServiceGetTasksMethodDescriptor   = taskServiceServiceDescriptor.Methods().ByName("GetTasks")
	taskServiceGetTaskMethodDescriptor    = taskServiceServiceDescriptor.Methods().ByName("GetTask")
	taskServiceCreateTaskMethodDescriptor = taskServiceServiceDescriptor.Methods().ByName("CreateTask")
	taskServiceUpdateTaskMethodDescriptor = taskServiceServiceDescriptor.Methods().ByName("UpdateTask")
	taskServiceDeleteTaskMethodDescriptor = taskServiceServiceDescriptor.Methods().ByName("DeleteTask")
)

// TaskServiceClient is a client for the tasks.v1.TaskService service.
type TaskServiceClient interface {
	// Get all tasks
	GetTasks(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetTasksResponse], error)
	// Get a specific task
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.Task], error)
	// Create a new task
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.Task], error)
	// Update an existing task
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.Task], error)
	// Delete a task
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.Task], error)
}

// NewTaskServiceClient constructs a client for the tasks.v1.TaskService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTaskServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TaskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &taskServiceClient{
		getTasks: connect.NewClient[emptypb.Empty, v1.GetTasksResponse](
			httpClient,
			baseURL+TaskServiceGetTasksProcedure,
			connect.WithSchema(taskServiceGetTasksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[v1.GetTaskRequest, v1.Task](
			httpClient,
			baseURL+TaskServiceGetTaskProcedure,
			connect.WithSchema(taskServiceGetTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.Task](
			httpClient,
			baseURL+TaskServiceCreateTaskProcedure,
			connect.WithSchema(taskServiceCreateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.Task](
			httpClient,
			baseURL+TaskServiceUpdateTaskProcedure,
			connect.WithSchema(taskServiceUpdateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.Task](
			httpClient,
			baseURL+TaskServiceDeleteTaskProcedure,
			connect.WithSchema(taskServiceDeleteTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// taskServiceClient implements TaskServiceClient.
type taskServiceClient struct {
	getTasks   *connect.Client[emptypb.Empty, v1.GetTasksResponse]
	getTask    *connect.Client[v1.GetTaskRequest, v1.Task]
	createTask *connect.Client[v1.CreateTaskRequest, v1.Task]
	updateTask *connect.Client[v1.UpdateTaskRequest, v1.Task]
	deleteTask *connect.Client[v1.DeleteTaskRequest, v1.Task]
}

// GetTasks calls tasks.v1.TaskService.GetTasks.
func (c *taskServiceClient) GetTasks(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetTasksResponse], error) {
	return c.getTasks.CallUnary(ctx, req)
}

// GetTask calls tasks.v1.TaskService.GetTask.
func (c *taskServiceClient) GetTask(ctx context.Context, req *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.Task], error) {
	return c.getTask.CallUnary(ctx, req)
}

// CreateTask calls tasks.v1.TaskService.CreateTask.
func (c *taskServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.Task], error) {
	return c.createTask.CallUnary(ctx, req)
}

// UpdateTask calls tasks.v1.TaskService.UpdateTask.
func (c *taskServiceClient) UpdateTask(ctx context.Context, req *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.Task], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// DeleteTask calls tasks.v1.TaskService.DeleteTask.
func (c *taskServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.Task], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// TaskServiceHandler is an implementation of the tasks.v1.TaskService service.
type TaskServiceHandler interface {
	// Get all tasks
	GetTasks(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetTasksResponse], error)
	// Get a specific task
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.Task], error)
	// Create a new task
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.Task], error)
	// Update an existing task
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.Task], error)
	// Delete a task
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.Task], error)
}

// NewTaskServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTaskServiceHandler(svc TaskServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	taskServiceGetTasksHandler := connect.NewUnaryHandler(
		TaskServiceGetTasksProcedure,
		svc.GetTasks,
		connect.WithSchema(taskServiceGetTasksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceGetTaskHandler := connect.NewUnaryHandler(
		TaskServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(taskServiceGetTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceCreateTaskHandler := connect.NewUnaryHandler(
		TaskServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(taskServiceCreateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceUpdateTaskHandler := connect.NewUnaryHandler(
		TaskServiceUpdateTaskProcedure,
		svc.UpdateTask,
		connect.WithSchema(taskServiceUpdateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceDeleteTaskHandler := connect.NewUnaryHandler(
		TaskServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(taskServiceDeleteTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/tasks.v1.TaskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TaskServiceGetTasksProcedure:
			taskServiceGetTasksHandler.ServeHTTP(w, r)
		case TaskServiceGetTaskProcedure:
			taskServiceGetTaskHandler.ServeHTTP(w, r)
		case TaskServiceCreateTaskProcedure:
			taskServiceCreateTaskHandler.ServeHTTP(w, r)
		case TaskServiceUpdateTaskProcedure:
			taskServiceUpdateTaskHandler.ServeHTTP(w, r)
		case TaskServiceDeleteTaskProcedure:
			taskServiceDeleteTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTaskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTaskServiceHandler struct{}

func (UnimplementedTaskServiceHandler) GetTasks(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tasks.v1.TaskService.GetTasks is not implemented"))
}

func (UnimplementedTaskServiceHandler) GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.Task], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tasks.v1.TaskService.GetTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.Task], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tasks.v1.TaskService.CreateTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.Task], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tasks.v1.TaskService.UpdateTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.Task], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tasks.v1.TaskService.DeleteTask is not implemented"))
}
